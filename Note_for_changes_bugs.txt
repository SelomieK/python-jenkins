
Picked Methods:

1. def ConvertToAtlasCopcoString(self, toConvert):
2. def ReverseString(self, toReverse):

Additionally I tried for def IsItFibonacci(self, toTest): method.

 
Bugs and Changes:

Method: ConvertToAtlasCopcoString(self,toConvert)
   1. Line 14: No need of if condition at 87, as 87 is between 1 and 100

             Not proper if …elif usage: Removed the second if. 
			 
   2. Instead of condition at toConvert=87, I added a type exception handler, since it is stated in the decription 
      of given method that it accepts only integer. In this case 
       it handles the TypeError if we don’t include condition for type check, but not always. 
			Example:
			def add(a,b):
               return a+b

            print(add(3,3)) and print(add('as','sd')) works both if the operation is applicable to the argument. 
			
	
Method: ReverseString(self,toReverse)

1. It is stated that ReverseString method accepts string. Therefore, I added parameter type declaration to the parameter toReverse. 
   Yet, as [::-1] is an operation for string, TypeError will be raised when non string is passed.  
   This can be done using one of the following. 
a.	Add raise exception in the conditional statements.
b.	Specify that the input argument for ReverseStringfunction  must be string using like->defReverseString(toReverse:str):
I have used method b in this case. I found no bugs in this method

 
Method: IsItFibonacci(self,toTest)
      Line 53 & 54: Not Relevant if condition and also for 19 the return should be false not true. 
      No need of special condition for 19, since it is between 1 and 25. 

In addition, to import the folder as a package, I used "from AtlasCopcoSoftwareTesterTest.various_methods import VariousMethods" 
in __init__ instead of relative import of the module.

